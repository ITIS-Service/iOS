//
//  CourseDetailsPresenter.swift
//  ITISService
//
//  Created by Timur Shafigullin on 25/11/2018.
//  Copyright (c) 2018 Timur Shafigullin. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CourseDetailsPresentationLogic: LoaderPresentationLogic, ErrorMessagePrentationLogic {
    func displayInitialState(with response: CourseDetailsModels.InitialSate.Response)
    func displayCourseDetails(with response: CourseDetailsModels.Fetch.Response)
    func updateListCourse() 
}

class CourseDetailsPresenter: CourseDetailsPresentationLogic {
    
    
    weak var viewController: CourseDetailsDisplayLogic!
    
    var loaderDislpayViewController: LoaderDisplayLogic! {
        get {
            return self.viewController
        }
    }
    
    var errorMessagePresenter: ErrorMessagePresenter! {
        get {
            return self.viewController
        }
    }

    // MARK: Instance Methods
    
    func displayInitialState(with response: CourseDetailsModels.InitialSate.Response) {
        let course = response.course
        let viewModel = CourseDetailsModels.InitialSate.ViewModel(name: course.name, description: course.description)
        
        self.viewController.configureInitialState(with: viewModel)
    }
    
    func displayCourseDetails(with response: CourseDetailsModels.Fetch.Response) {
        let courseDetails = response.courseDetails
        
        let teacherName = "\(courseDetails.teacher.lastName) \(courseDetails.teacher.firstName)"
        
        let teacherLinkAttributedString = NSMutableAttributedString(string: "Посмотреть профиль КФУ")
        let url = courseDetails.teacher.link
        
        teacherLinkAttributedString.setAttributes([
            .link: url,
            NSAttributedString.Key.font: UIFont.systemFont(ofSize: 16)
            ], range: NSMakeRange(0, teacherLinkAttributedString.string.count))
        
        var times = courseDetails.dayTimes.reduce("") { (result, dayTime) -> String in
            var timesString = dayTime.day.name
            timesString += ": "
            dayTime.times.enumerated().forEach {
                if $0.offset == dayTime.times.count - 1 {
                    timesString += "\($0.element)\n"
                } else {
                    timesString += "\($0.element), "
                }
            }
            return result + timesString
        }
        times = String(times.dropLast())
        
        var shouldShowManagementView = false
        var shouldShowAcademicPerformanceButton = false
        var shouldShowSignUpCourseButton = false
        var shouldShowSignOutCourseButton = false
        
        if let userCourseStatus = courseDetails.userCourseStatus {
            shouldShowManagementView = true
            if userCourseStatus == .accepted {
                shouldShowAcademicPerformanceButton = true
            } else if userCourseStatus == .waiting {
                shouldShowSignOutCourseButton = true
            }
        } else if courseDetails.signUpOpen ?? false {
            shouldShowSignUpCourseButton = true
        }
        
        let viewModel = CourseDetailsModels.Fetch.ViewModel(
            times: times,
            place: courseDetails.place,
            teacherName: teacherName,
            teacherLink: teacherLinkAttributedString,
            foregroundColor: .white,
            underlineStyle: .single,
            shouldShowManagementView: shouldShowManagementView,
            shouldShowAcademicPerformanceButton: shouldShowAcademicPerformanceButton,
            shouldShowSignUpCourseButton: shouldShowSignUpCourseButton,
            shouldShowSignOutCourseButton: shouldShowSignOutCourseButton,
            courseStatus: courseDetails.userCourseStatus?.description
        )
        
        let initialViewModel = CourseDetailsModels.InitialSate.ViewModel(name: courseDetails.name, description: courseDetails.description)
        
        self.viewController.configureInitialState(with: initialViewModel)
        self.viewController.showCourseDetails(with: viewModel)
    }
    
    func updateListCourse() {
        self.viewController.updateListCourse()
    }
}
