//
//  CourseDetailsInteractor.swift
//  ITISService
//
//  Created by Timur Shafigullin on 25/11/2018.
//  Copyright (c) 2018 Timur Shafigullin. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CourseDetailsBusinessLogic {
    func setupInitialState()
    func fetchCourseDetails()
    func signUpCourse()
    func signOutCourse()
    func courseName() -> String
}

protocol CourseDetailsDataStore: class {
    var course: Course? { get set }
    var courseID: Int? { get set }
}

class CourseDetailsInteractor: CourseDetailsBusinessLogic, CourseDetailsDataStore {
    
    // MARK: - Instance Properties
    
    fileprivate var updateHandler: Disposable?
    
    // MARK: -
    
    var presenter: CourseDetailsPresentationLogic!
    var worker: CourseDetailsWorker!
    var userNetworkManager: UserNetworkManager!
    
    var course: Course?
    var courseID: Int?
    
    var courseDetails: CourseDetails?
    
    // MARK: - Initializers
    
    deinit {
        self.unsubscribeFromCourseUpdateEvents()
    }
    
    init() {
        self.subscribeToCourseUpdateEvents()
    }
    
    // MARK: - Instance Methods
    
    fileprivate func subscribeToCourseUpdateEvents() {
        self.updateHandler = Managers.courseDetailsManager.didUpdateEvent.addHandler(target: self) { [weak self] (courseID) in
            guard let viewController = self else {
                return
            }
            
            guard let openedCourseID = viewController.course?.id ?? viewController.courseID else {
                return
            }
            
            if openedCourseID == courseID {
                viewController.presenter.showActivityIndicator(true)
                viewController.fetchCourseDetails()
            }
        }
    }
    
    fileprivate func unsubscribeFromCourseUpdateEvents() {
        if let updateHandler = self.updateHandler {
            updateHandler.dispose()
            self.updateHandler = nil
        }
    }
    
    // MARK: -

    func setupInitialState() {
        guard let courseID = self.course?.id ?? self.courseID else {
            return
        }
        
        if let courseDetails = Managers.courseDetailsManager.fetch(withCourseID: courseID) {
            self.courseDetails = courseDetails
            self.presenter.displayCourseDetails(with: CourseDetailsModels.Fetch.Response(courseDetails: courseDetails))
        } else if let course = self.course {
            self.presenter.displayInitialState(with: CourseDetailsModels.InitialSate.Response(course: course))
        }
    }
    
    func fetchCourseDetails() {
        guard let courseID = self.course?.id ?? self.courseID else {
            return
        }
        
        if self.courseDetails == nil {
            self.presenter.showActivityIndicator(true)
        }
        
        self.userNetworkManager.fetchCourseDetails(courseID: courseID, success: { [weak self] (courseDetails) in
            self?.presenter.showActivityIndicator(false)
            self?.presenter.displayCourseDetails(with: CourseDetailsModels.Fetch.Response(courseDetails: courseDetails))
            self?.courseDetails = courseDetails
        }) { [weak self] (error) in
            self?.presenter.showActivityIndicator(false)
            self?.presenter.showAlert(with: error)
        }
    }
    
    func signUpCourse() {
        guard let courseID = self.course?.id ?? self.courseID else {
            return
        }
        
        self.presenter.showActivityIndicator(true)
        self.userNetworkManager.signUpCourse(with: courseID, success: { [weak self] (courseDetails) in
            self?.presenter.showActivityIndicator(false)
            self?.presenter.displayCourseDetails(with: CourseDetailsModels.Fetch.Response(courseDetails: courseDetails))
            self?.presenter.updateListCourse()
        }) { [weak self] (error) in
            self?.presenter.showActivityIndicator(false)
            self?.presenter.showAlert(with: error)
        }
    }
    
    func signOutCourse() {
        guard let courseID = self.course?.id ?? self.courseID else {
            return
        }
        
        self.presenter.showActivityIndicator(true)
        self.userNetworkManager.signOutCourse(with: courseID, success: { [weak self] (courseDetails) in
            self?.presenter.showActivityIndicator(false)
            self?.presenter.displayCourseDetails(with: CourseDetailsModels.Fetch.Response(courseDetails: courseDetails))
            self?.presenter.updateListCourse()
        }) { [weak self] (error) in
            self?.presenter.showActivityIndicator(false)
            self?.presenter.showAlert(with: error)
        }
    }
    
    func courseName() -> String {
        return self.courseDetails?.course.name ?? ""
    }

}
