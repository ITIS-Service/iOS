//
//  PointsViewController.swift
//  ITISService
//
//  Created by Timur Shafigullin on 02/12/2018.
//  Copyright (c) 2018 Timur Shafigullin. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PointsDisplayLogic: LoaderDisplayLogic, ErrorMessagePresenter {
    func showPoints(sections: [TableViewSection], viewModel: Points.Fetch.ViewModel)
}

protocol PointsDataStoreHolder {
    var datastore: PointsDataStore! { get }
}

class PointsViewController: UIViewController, PointsDisplayLogic, PointsDataStoreHolder {
    
    // MARK: - Nested Types
    
    fileprivate enum Constants {
        
        // MARK: - Type properties
        
    }
    
    // MARK: - Instance Properties
    
    @IBOutlet fileprivate weak var tableView: UITableView!
    @IBOutlet fileprivate weak var totalPointsCountLabel: UILabel!
    
    // MARK: -
    
    fileprivate let datasource = PointsDatasource()
    
    // MARK: -
    
    var interactor: PointsBusinessLogic!
    var router: (NSObjectProtocol & PointsRoutingLogic & PointsDataPassing)!
    var datastore: PointsDataStore!
    
    // MARK: - Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: - Setup
    
    private func setup() {
        let viewController = self
        let interactor = PointsInteractor()
        let presenter = PointsPresenter()
        let router = PointsRouter()
        viewController.interactor = interactor
        viewController.router = router
        viewController.datastore = interactor
        interactor.presenter = presenter
        interactor.userNetworkManager = NetworkManagers.userNetworkManager
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: - Instance Methods
    
    fileprivate func configureDesign() {
        self.tableView.dataSource = self.datasource
        self.tableView.delegate = self.datasource
        self.tableView.tableFooterView = UIView()
        self.tableView.register(PointTableViewCell.nib(), forCellReuseIdentifier: PointTableViewCell.identifier())
    }
    
    fileprivate func fetchPoints() {
        self.interactor.fetchPoints()
    }
    
    // MARK: - UIViewController
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.configureDesign()
        self.fetchPoints()
    }
    
    // MARK: - PointsDisplayLogic Methods
    
    func showPoints(sections: [TableViewSection], viewModel: Points.Fetch.ViewModel) {
        self.datasource.sections = sections
        self.tableView.reloadData()
        
        self.totalPointsCountLabel.text = viewModel.totalCount
    }
    
}
