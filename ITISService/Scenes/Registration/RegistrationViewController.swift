//
//  RegistrationViewController.swift
//  ITISService
//
//  Created by Тимур Шафигуллин on 22/10/2018.
//  Copyright (c) 2018 Timur Shafigullin. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RegistrationDisplayLogic: class {
    func showError(with viewModel: Registration.SignUp.ViewModel)
    func showQuestionsScreen()
    func showActivityIndicator(_ show: Bool)
}

class RegistrationViewController: UIViewController, RegistrationDisplayLogic {
    
    //MARK: - Constants
    
    fileprivate struct Constants {
        static let titleColor = UIColor(red: 153 / 255.0, green: 153 / 255.0, blue: 149 / 255.0, alpha: 1)
    }
    
    //MARK: - Instance Properties
    
    @IBOutlet fileprivate weak var errorView: UIView!
    @IBOutlet fileprivate weak var errorLabel: UILabel!
    @IBOutlet fileprivate weak var emailTextField: UITextField!
    @IBOutlet fileprivate weak var passwordTextField: UITextField!
    @IBOutlet fileprivate weak var confirmPasswordTextField: UITextField!
    @IBOutlet fileprivate weak var sendButton: UIButton!
    
    //MARK: -
    
    var interactor: RegistrationBusinessLogic!
    var router: (NSObjectProtocol & RegistrationRoutingLogic & RegistrationDataPassing)!
    
    //MARK: - Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    //MARK: - Setup
    
    private func setup() {
        let viewController = self
        let interactor = RegistrationInteractor()
        let presenter = RegistrationPresenter()
        let router = RegistrationRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        interactor.userNetworkManager = UserNetworkManagerImpl()
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    //MARK: - Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    //MARK: - Instance Methods
    
    @IBAction fileprivate func onSignUpButtonClick(_ sender: Any) {
        let request = Registration.SignUp.Request(email: emailTextField.text!, password: passwordTextField.text!, confirmPassword: confirmPasswordTextField.text!)
        self.interactor.signUp(with: request)
    }
    
    @objc fileprivate func onSendBarButtonClick(_ sender: Any) {
        self.onSignUpButtonClick(sender)
    }
    
    //MARK: -
    
    private func configureDesign() {
        self.navigationController?.transparent()
        self.emailTextField.attributedPlaceholder = NSAttributedString(string: "Ваш e-mail", attributes: Common.Autorization.placeholderAttributes)
        self.emailTextField.autocorrectionType = .no
        self.passwordTextField.attributedPlaceholder = NSAttributedString(string: "Создать пароль", attributes: Common.Autorization.placeholderAttributes)
        self.confirmPasswordTextField.attributedPlaceholder = NSAttributedString(string: "Повторить пароль", attributes: Common.Autorization.placeholderAttributes)
        
        self.emailTextField.addTarget(self, action: #selector(textFieldDidChange(_:)), for: .editingChanged)
        self.passwordTextField.addTarget(self, action: #selector(textFieldDidChange(_:)), for: .editingChanged)
        self.confirmPasswordTextField.addTarget(self, action: #selector(textFieldDidChange(_:)), for: .editingChanged)
        
        if UIScreen.isIphone5Screen() {
            let sendBarButtonItem = UIBarButtonItem(title: "Отправить", style: .done, target: self, action: #selector(onSendBarButtonClick(_:)))
            sendBarButtonItem.setTitleTextAttributes([.foregroundColor: Constants.titleColor, .font: UIFont(name: "HelveticaNeue-Light", size: 17)!], for: .normal)
            self.navigationItem.rightBarButtonItem = sendBarButtonItem
            
            self.sendButton.isHidden = true
        }
    }
    
    @objc private func textFieldDidChange(_ textField: UITextField) {
        self.emailTextField.textColor = UIColor.white
        self.passwordTextField.textColor = UIColor.white
        self.confirmPasswordTextField.textColor = UIColor.white
    }
    
    //MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.configureDesign()
    }
    
    //MARK: - RegistrationDisplayLogic Methods
    
    func showError(with viewModel: Registration.SignUp.ViewModel) {
        self.errorView.isHidden = false
        self.errorLabel.text = viewModel.errorMessage
        self.emailTextField.textColor = viewModel.emailTextColor
        self.passwordTextField.textColor = viewModel.passwordsTextColor
        self.confirmPasswordTextField.textColor = viewModel.passwordsTextColor
    }
    
    func showQuestionsScreen() {
        self.performSegue(withIdentifier: "startQuizNavigationController", sender: nil)
    }
    
    func showActivityIndicator(_ show: Bool) {
        if (show) {
            self.view.showActivityIndicator()
        } else {
            self.view.hideActivityIndicator()
        }
    }
    
}
