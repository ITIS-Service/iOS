//
//  LoginInteractor.swift
//  ITISService
//
//  Created by Тимур Шафигуллин on 19/10/2018.
//  Copyright (c) 2018 Timur Shafigullin. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginBusinessLogic {
    func signIn(with request: Login.SignIn.Request)
}

protocol LoginDataStore {
    
}

class LoginInteractor: LoginBusinessLogic, LoginDataStore {
    
    // MARK: - Instance Properties
    
    var presenter: LoginPresentationLogic!
    var worker: LoginWorker!
    var networkManager: UserNetworkManager!
    var deviceNetworkManager: DeviceNetworkManager!
    
    // MARK: - Instance Methods
    
    fileprivate func registerDevice() {
        guard let token = KeychainManager.shared.deviceToken else {
            Log.w("Device token not found")
            return
        }
        
        let model = UIDevice.modelName
        let systemVersion = UIDevice.current.systemVersion
        
        self.deviceNetworkManager.register(name: model, os: "iOS \(systemVersion)", token: token, success: { (response) in
            Log.i("Device registered on server successfully")
        }) { (error) in
            Log.e("Unable to register device on server")
            Log.e("Message: \(error.message)")
        }
    }
    
    // MARK: -
    
    func signIn(with request: Login.SignIn.Request) {
        guard Validator.validate(studEmail: request.email) else {
            let response = Login.SignIn.Response(success: false, message: Common.Messages.invalidEmail, shouldShowQuiz: false)
            self.presenter.signIn(response: response)
            return
        }
        
        self.presenter.showActivityIndicator(true)
        self.networkManager.login(with: request.email, password: request.password, success: { [weak self] (user) in
            guard let strongSelf = self else { return }
            strongSelf.presenter.showActivityIndicator(false)
            strongSelf.presenter.signIn(response: Login.SignIn.Response(success: true, message: nil, shouldShowQuiz: !user.passedQuiz))
            
            NotificationCenter.default.post(name: .userDidSignIn, object: self)
            strongSelf.registerDevice()
        }) { [weak self] (error) in
            self?.presenter.showActivityIndicator(false)
            self?.presenter.signIn(response: Login.SignIn.Response(success: false, message: error.message, shouldShowQuiz: false))
        }
    }
}
