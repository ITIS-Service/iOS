//
//  QuestionViewController.swift
//  ITISService
//
//  Created by Тимур Шафигуллин on 27/10/2018.
//  Copyright (c) 2018 Timur Shafigullin. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol QuestionDisplayLogic: AnswerTableViewCellDelegate, ErrorMessagePresenter {
    func showQuestionTitle(with viewModel: Question.Show.ViewModel)
    func showAnswers(with tableViewModels: [Question.AnswersTableView.Model])
    func showNextQuestionScreen()
    func unselectButtons(with viewModel: Question.Buttons.ViewModel)
    func showCoursesScreen()
    func showActivityIndicator(_ show: Bool)
}

class QuestionViewController: UIViewController, QuestionDisplayLogic {
    
    // MARK: - Nested Types
    
    fileprivate struct Segues {
        
        // MARK: - Type Properties
        
        static let finishQuiz = "FinishQuiz"
    }
    
    //MARK: - Instance Properties
    
    @IBOutlet weak var questionNumberLabel: UILabel!
    @IBOutlet weak var questionTitleLabel: UILabel!
    @IBOutlet weak var answersTableView: UITableView!
    
    //MARK: -
    
    private let datasource = AnswersDatasource()
    var interactor: QuestionBusinessLogic!
    var router: (NSObjectProtocol & QuestionRoutingLogic & QuestionDataPassing)!
    
    //MARK: - Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    //MARK: - Setup
    
    private func setup() {
        let viewController = self
        let interactor = QuestionInteractor()
        let presenter = QuestionPresenter()
        let router = QuestionRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        interactor.userNetworkManager = NetworkManagers.userNetworkManager
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    //MARK: - Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    //MARK: - Instance Methods
    
    //MARK: -
    
    private func configureDesign() {
        self.navigationController?.navigationBar.titleTextAttributes = [
            .foregroundColor: UIColor.white,
            .font: UIFont(name: "HelveticaNeue-Light", size: 17)!
        ]
        self.navigationController?.transparent()
        
        self.answersTableView.separatorStyle = .none
        self.answersTableView.allowsSelection = false
        self.answersTableView.tableFooterView = UIView(frame: .zero)
        self.answersTableView.register(AnswerTableViewCell.nib(), forCellReuseIdentifier: AnswerTableViewCell.identifier())
        self.answersTableView.dataSource = self.datasource
        self.answersTableView.delegate = self.datasource
    }
    
    private func getNextQuestion() {
        self.interactor.getNextQuestion()
    }
    
    //MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.configureDesign()
        self.getNextQuestion()
    }
    
    override func willMove(toParent parent: UIViewController?) {
        super.willMove(toParent: parent)
        if parent == nil {
            self.interactor.previousQuestion()
        }
    }
    
    //MARK: - QuestionDisplayLogic Methods
    
    func showQuestionTitle(with viewModel: Question.Show.ViewModel) {
        self.questionTitleLabel.text = viewModel.questionTitle
        self.questionNumberLabel.text = viewModel.questionNumberTitle
    }
    
    func showAnswers(with tableViewModels: [Question.AnswersTableView.Model]) {
        self.datasource.data = tableViewModels
        self.answersTableView.reloadData()
    }
    
    func showNextQuestionScreen() {
        self.router.showNextQuestionScreen()
    }
    
    func unselectButtons(with viewModel: Question.Buttons.ViewModel) {
        self.answersTableView.reloadRows(at: viewModel.unselectedIndexPaths, with: .automatic)
    }
    
    func showCoursesScreen() {
        self.performSegue(withIdentifier: Segues.finishQuiz, sender: nil)
    }
    
    func showActivityIndicator(_ show: Bool) {
        if show {
            self.view.showActivityIndicator()
        } else {
            self.view.hideActivityIndicator()
        }
    }
    
}

//MARK: - AnswerTableViewCellDelegate Mathods
extension QuestionViewController {
    
    func didAnswerButtonClicked(_ button: UIButton, at index: Int) {
        self.interactor.unselectOtherButtons(with: Question.Buttons.Request(selectedButtonIndex: index, buttonsCount: self.datasource.data.count))
        self.interactor.writeAnswer(with: Question.Answer.Request(answerIndex: index))
    }
    
}
